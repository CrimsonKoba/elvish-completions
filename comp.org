#+TITLE:  Completion framework for Elvish
#+AUTHOR: Diego Zamboni
#+EMAIL:  diego@zzamboni.org

This module provides a few handy functions that make it easier to define completions in Elvish.

This file is written in [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][literate programming style]], to make it easy to explain. See [[file:comp.elv][comp.elv]] for the generated file.

* Table of Contents                                            :TOC:noexport:
- [[#usage][Usage]]
- [[#implementation][Implementation]]

* Usage

Install the =elvish-completions= package using [[https://elvish.io/ref/epm.html][epm]]:

#+begin_src elvish
  use epm
  epm:install github.com/zzamboni/elvish-completions
#+end_src

In your =rc.elv=, load this module:

#+begin_src elvish
  use github.com/zzamboni/elvish-completions/comp
#+end_src

The =comp:subcommands= function does simple subcomand-completion for commands such as =git=. It receives the following arguments:

- =$def= is a map containing the completion definitions. Each index is a subcommand, and its value is an array in which each element can be either a function that returns the possible completions at that point, an array containing textual possible completions at that point, or a string which refers to another subcommand which defines the completions to use (think of command aliases in =git=). The map may contain an entry with the index =-opts=. If present, it should be an array or a function containing possible options at the top level (to appear before a subcommand). Here is a simplified example from the [[https://github.com/zzamboni/elvish-completions/blob/master/git.org][git completions]] (see that file for the full code, including the definition of the functions that get called):
  #+begin_src elvish
    git-completions = [
      &-opts= [
        (git --help | each [l]{
            re:find '(--\w[\w-]*)' $l; re:find '[^-](-\w)\W' $l
        })[groups][1][text]
      ]
      &add=      [ { MODIFIED-FILES; UNTRACKED-FILES } ]
      &stage=    add
      &checkout= [ { MODIFIED-FILES; BRANCHES }        ]
      &mv=       [ $TRACKED-FILES~                     ]
      &rm=       mv
      &diff=     mv
      &push=     [ $REMOTES~ $BRANCHES~                ]
      &merge=    [ $BRANCHES~                          ]
    ]
  #+end_src

- =@cmd= is the current command line, as passed to regular [[https://elvish.io/ref/edit.html#completion-api][completion functions]].

For example, =comp:subcommands= is used by the [[https://github.com/zzamboni/elvish-completions/blob/master/git.org][git completer]] as follows:

#+begin_src elvish
  fn git-completer [gitcmd @rest]{
    status = (git:status)
    comp:subcommands $git-completions $gitcmd $@rest
  }

  edit:completion:arg-completer[git] = $git-completer~
#+end_src

* Implementation
:PROPERTIES:
:header-args:elvish: :tangle (concat (file-name-sans-extension (buffer-file-name)) ".elv")
:header-args: :mkdirp yes :comments no
:END:

#+begin_src elvish
  use github.com/zzamboni/elvish-modules/util
#+end_src

=expand-completion-item= expands a single element into its completion values. If it's a function, it gets executed. If it's a list, it's exploded.

#+begin_src elvish
  fn expand-completion-item [def item]{
    if (has-key $def $item) {
      what = (kind-of $def[$item])
      if (eq $what 'fn') {
        $def[$item]
      } elif (eq $what 'list') {
        explode $def[$item]
      }
    }
  }
#+end_src

=comp:sequence= receives a definition array and the current contents of the command line. The first element of =$cmd= is the command, and it should not be included in the definition.

#+begin_src elvish
  fn sequence [def @cmd]{
    n = (count $cmd)
    expand-completion-item $def (util:min (- $n 2) (- (count $def) 1))
  }
#+end_src

=comp:subcommands= receives a definition map and the current contents of the command line.

#+begin_src elvish
  fn subcommands [def @cmd]{
    n = (count $cmd)
#+end_src

If completion for the top-level subcommand is expected (=eq $n 2=), the top-level indices plus the global options (if provided in the =-opts= element).

#+begin_src elvish
    if (eq $n 2) {
      keys (dissoc $def -opts)
      if (has-key $def -opts) {
        expand-completion-item $def -opts
      }
#+end_src

Otherwise, depending on the subcommand already provided, the corresponding element of the corresponding definition list is expanded. If the element is a string, it is considered and alias, so we call =subcommands= with the target command.

#+begin_src elvish
    } else {
      subcommand = $cmd[1]
      if (has-key $def $subcommand) {
        if (eq (kind-of $def[$subcommand]) 'string') {
          subcommands $def $cmd[0] $def[$subcommand] (explode $cmd[2:])
        } else {
          sequence $def[$subcommand] (explode $cmd[1:])
        }
      }
    }
  }
#+end_src
