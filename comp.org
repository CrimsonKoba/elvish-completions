#+title: Completion framework for Elvish
#+author: Diego Zamboni
#+email: diego@zzamboni.org

The =comp= module provides a few functions that make it easier to define completions in Elvish. Please note that this module is not intended for direct use in an Elvish session, but to write your own [[https://elvish.io/ref/edit.html#completion-api][argument completers]].

This file is written in [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][literate programming style]], to make it easy to explain. See [[file:comp.elv][comp.elv]] for the generated file.

* Table of Contents                                          :TOC_3:noexport:
- [[#usage][Usage]]
  - [[#completion-definitions][Completion definitions]]
    - [[#base-completion-items][Base completion items]]
    - [[#completion-sequences][Completion sequences]]
    - [[#subcommand-completion][Subcommand completion]]
  - [[#utility-functions][Utility functions]]
- [[#implementation][Implementation]]
  - [[#utility-functions-1][Utility functions]]
  - [[#completion-functions][Completion functions]]
  - [[#completion-wrapper-functions][Completion wrapper functions]]

* Usage

The =comp= module provides a few functions that make it easier to define completions in Elvish. Please note that this module is not intended for direct use in an Elvish session, but to write your own [[https://elvish.io/ref/edit.html#completion-api][argument completers]].

*NOTE: This module is very much in development, so the API, data structures, etc. may change at any moment.*

As a first step, install the =elvish-completions= package using [[https://elvish.io/ref/epm.html][epm]]:

#+begin_src elvish
  use epm
  epm:install github.com/zzamboni/elvish-completions
#+end_src

From the file where you will define your completions, load this module:

#+begin_src elvish
  use github.com/zzamboni/elvish-completions/comp
#+end_src

The main entry point for this module is =comp:expand=. It receives two arguments:

- A "completion definition", which in general, indicates how the completions will be produced. See below for details.
- The contents of the command line so far, as passed to the [[https://elvish.io/ref/edit.html#argument-completer][argument completer functions]].

This function returns any available completions according to its definition and the current command line. It needs to be called from within the argument completer for the corresponding command, so that its result are offered by Elvish to the user. A typical way of doing this would be like this (where =command= is the command for which you are defining the completions, and =$def= contains the completion definition data structure):

#+begin_src elvish
  edit:completion:arg-completer[command] = [@cmd]{ comp:expand $def $@cmd }
#+end_src

For this common case, =comp= provides a helper function called =comp:expand-wrapper=, which receives only the definition argument and returns a /function/ which can be assigned directly to the corresponding elements of =$edit:completion:arg-completer=, so that the code above can be written like this:

#+begin_src elvish
  edit:completion:arg-completer[command] = (comp:expand-wrapper $def)
#+end_src

To create completions for new commands, your main task is to define a new completion definition. This is explained below, with examples of the different available structures and features.

** Completion definitions
*** Base completion items

The base building block is the "completion definition item", can be one of the following:

- An array containing all the potential completions (the array can be empty, in which case no completions are provided).
- A function which returns the potential completions (it can return nothing, in which case no completions are provided). The function should have one of the following arities, which affect which arguments will be passed to it:
  - If it takes no arguments, no arguments are passed to it
  - If it takes only a single argument, it gets the current (last) component of the command line =@cmd=
  - If it takes only a rest argument, it gets the full current command line (the contents of =@cmd=)

*Example #1:* a simple completer for =cd=

In this case, we define a function which receives the current "stem" (the part of the filename the user has typed so far) and expands all the files that match that prefix, then filters those which are directories, and returns them as completion possibilities. We pass the function directly as a completion item to =comp:expand=.

#+begin_src elvish
  fn complete-dirs [arg]{ put $arg*[match-hidden] | each [x]{ if (-is-dir $x) { put $x } } }
  edit:completion:arg-completer[cd] = [@cmd]{ comp:expand $complete-dirs~ $@cmd }
#+end_src

I defined the =complete-dirs= function separately only for clarity - you can also embed the lambda directly as an argument to =comp:expand.=

In simple cases like the above, you can use the =comp:expand-wrapper= function to avoid defining the wrapper function by hand:

#+begin_src elvish
  edit:completion:arg-completer[cd] = (comp:expand-wrapper $complete-dirs~)
#+end_src

For file and directory completion, you can use the utility function =comp:files= instead of defining your own function (see [[*Utility functions][Utility functions]]):

#+begin_src elvish
  edit:completion:arg-completer[cd] = (comp:expand-wrapper [arg]{ comp:files $arg &dirs-only })
#+end_src

*** Completion sequences

Completion items can be aggregated in a /sequence of items/ when you need to provide different completions for different positional arguments of a command. Sequences include support for command-line options at the beginning of the command. The definition structure in this case has to be a map with two indices:

- =-seq= (mandatory) containing an array of base definition items, which will be applied depending on their position within the command parameter sequence. If the the last element of the list is the string =...= (three periods), then next-to-last element of the list is repeated for all later arguments. If no completions should be provided past the last argument, simply omit the periods. If a sequence should produce no completions at all, you can use an empty list =[]=. If any specific elements of the sequence should have no completions, you can specify ={ comp:empty }= as its value.
- =-opts= (optional) may contain a single definition item which produces a list of command-line options that are allowed at the beginning of the command, when no other arguments have been provided. Options can be specified in either of the following formats:
  - As a string which gets converted to a long-style option; e.g. ='all'= to specify the =--all= option. The string must not contain the dashes at the beginning.
  - As a map which may contain the following keys: =short= for the short one-letter option, =long= for the long-option string, and =desc= for a descriptive string which gets shown in the completion menu. For example:
    #+begin_example
      [ &short= a &long=all &desc="Show all items" ]
    #+end_example

*Note:* options are only offered as completions when the use has typed a dash as the first character. Otherwise the argument completers are used.

*Example #2:* we can improve on the previous completer for =cd= by preventing more than one argument from being completed (only the first argument will be completed using =complete-dirs=, since the list does not end with =...=):

#+begin_src elvish
  edit:completion:arg-completer[cd] = (comp:expand-wrapper [ &-seq= [ [arg]{ comp:files $arg &dirs-only } ] ])
#+end_src

*Example #3:* a simple completer for =ls= with a subset of its options. Note that =-l= and =-R= are only provided as completions when you have not typed any filenames yet. Also note that we are using [[*Utility functions][comp:decorate]] to display the files in a different color, and the =...= at the end of the sequence to use the same completer for all further elements.

#+begin_src elvish
  edit:completion:arg-completer[ls] = (comp:expand-wrapper [
      &-opts= [
        [ &short=l                 &desc='use a long listing format' ]
        [ &short=R &long=recursive &desc='list subdirectories recursively' ]
      ]
      &-seq= [ [arg]{ put $arg* | comp:decorate &style=blue } ... ]
  ])
#+end_src

*Example #4:* See the [[https://github.com/zzamboni/elvish-completions/blob/master/ssh.org][ssh completer]] for a real-world example of using sequences.

*** Subcommand completion

Completion sequences can be further aggregated into /subcommand structures/ to provide completion for commands such as =git=.  In this case, the definition is a map indexed by subcommand names. The value of each element is a completion item (it can be a single item, a sequence, or another subcommand map). Each item must only correspond to the arguments of its corresponding subcommand. The subcommand map may also contain an entry with the index =-opts= containing a single item definition to generate any available top-level options (to appear before a subcommand). The subcommand definition can be another subcommand structure to provide completion for sub-sub-commands (see the example below for =vagrant=).

*Example #5:* a simple completer for the =brew= package manager, with support for the =install=, =uninstall= and =cat= commands. =install= and =cat= gets as completions all available packages (the output of the =brew search= command), while =uninstall= only completes installed packages (the output of =brew list=). Note that for =install= and =uninstall= we automatically extract command-line options from their help messages, and pass them as the =-opts= element in the corresponding sequence definitions. Also note that all =-opts= elements get initialized at definition time (they are arrays), whereas the =-seq= completions get evaluated at runtime (they are lambdas), to automatically update according to the current packages. The =cat= command sequence allows only one option.

#+begin_src elvish
  brew-completions = [
    &-opts= [ version ]
    &install= [
      &-opts= [ (brew install -h | take 1 | comp:extract-opts &regex='()--(\w[\w-]*)()') ]
      &-seq= [ { brew search } ... ]
    ]
    &uninstall= [
      &-opts= [ (brew uninstall -h | take 1 | comp:extract-opts &regex='()--(\w[\w-]*)()') ]
      &-seq= [ { brew list } ... ]
    ]
    &cat= [ &-seq= [ { brew search } ] ]
  ]

  edit:completion:arg-completer[brew] = (comp:expand-wrapper $brew-completions)
#+end_src

*Example #6:* a simple completer for a subset of =vagrant=, which receives commands which may have subcommands and options of their own. Note that the value of =&up= is a sequence, but the value of =&box= is a subcommand map which includes the completions for =box add= and =box remove=. Also note the use of the =comp:extract-opts= function to extract the command-line arguments automatically from the help messages.

*Tip:* note that the values of =&-opts= are functions (e.g. ={ vagrant-opts up }=) instead of arrays (e.g. =( vagrant-opts up)=). Both would be valid, but in the latter case they would all be initialized at load time (when the data structure is defined), which might introduce a delay (particularly with more command definitions). By using functions the options are only extracted at runtime when the completion is requested. For further optimization, =vagrant-opts= could be made to memoize the values so that the delay only occurs the first time.

#+begin_src elvish
  vagrant-completions = [
    &-opts= [ version help ]
    &up= [
      &-opts= { vagrant up -h | comp:extract-opts }
      &-seq= [ ]
    ]
    &box= [
      &add= [
        &-opts= { vagrant box add -h | comp:extract-opts }
        &-seq= [ ]
      ]
      &remove= [
        &-opts= { vagrant box remove -h | comp:extract-opts }
        &-seq= [ { vagrant box list | eawk [_ @f]{ put $f[0] } } ... ]
      ]
    ]
  ]

  edit:completion:arg-completer[vagrant] = (comp:expand-wrapper $vagrant-completions)
#+end_src

*Example #7:* See the [[https://github.com/zzamboni/elvish-completions/blob/master/git.org][git completer]] for a real-world subcommand completion example, which also shows how extensively auto-population of subcommands and options can be done by extracting information from help messages.

** Utility functions

=comp:decorate= maps its input through =edit:complex-candidate= with the given options. Can be passed the same options as [[https://elvish.io/ref/edit.html#argument-completer][edit:complex-candidate]]. In addition, if =&suffix= is specified, it is used to set both =&display-suffix= and =&code-suffix=.

=comp:extract-opts= takes input from the pipeline and extracts command-line options from its output, assuming the following common format by default:

#+begin_example
  -o, --option                Option description
#+end_example

The regular expression used to extract the options can be specified with the =&regex= option, which should have three groups, which get mapped to short, long and description, respectively.

Typical use would be to populate an =-opts= element with something like this:

#+begin_src elvish
  &-opts= { vagrant -h | comp:extract-opts }
#+end_src

*Example #8:* the =brew= completer shown before can be made to show package names and command-line options in different styles. Note how =comp:decorate= can get its arguments both as arguments (in the =-opts= assignments) and as pipeline input (in =-seq=). Also note the use of =comp:extract-opts= to generate the =-opts= elements from the output of the =brew= help commands.

#+begin_src elvish
  brew-completions = [
    &-opts= [ version ]
    &install= [
      &-opts= [ (brew install -h | take 1 | comp:extract-opts &regex='()--(\w[\w-]*)()') ]
      &-seq= [ { brew search | comp:decorate &style=green } ... ]
    ]
  &uninstall= [
      &-opts= [ (brew uninstall -h | take 1 | comp:extract-opts &regex='()--(\w[\w-]*)()') ]
      &-seq= [ { brew list | comp:decorate &style=red } ... ]
    ]
    &cat= [ &-seq= [ { brew search } ] ]
  ]

  edit:completion:arg-completer[brew] = (comp:expand-wrapper $brew-completions)
#+end_src

* Implementation
:PROPERTIES:
:header-args:elvish: :tangle (concat (file-name-sans-extension (buffer-file-name)) ".elv")
:header-args: :mkdirp yes :comments no
:END:

#+begin_src elvish
  use re
  use github.com/zzamboni/elvish-modules/util
#+end_src

** Utility functions

=comp:decorate= maps its input through =edit:complex-candidate= with the given options. Can be passed the same options as [[https://elvish.io/ref/edit.html#argument-completer][edit:complex-candidate]]. In addition, if =&suffix= is specified, it is used to set both =&display-suffix= and =&code-suffix=.

#+begin_src elvish
  fn decorate [&code-suffix='' &display-suffix='' &suffix='' &style='' @input]{
    if (eq (count $input) 0) {
      input = [(all)]
    }
    if (not-eq $suffix '') {
      display-suffix = $suffix
      code-suffix = $suffix
    }
    each [k]{
      edit:complex-candidate &code-suffix=$code-suffix &display-suffix=$display-suffix &style=$style $k
    } $input
  }
#+end_src

=comp:empty= produces no completions. It can be used to signal the end of a completion definition sequence when we don't want to repeat the last item.

#+begin_src elvish
  fn empty { nop }
#+end_src

=comp:files= completes filenames, using any typed prefix as the stem. If the =&regex= option is specified, only files matching that pattern are completed. If =&only-dirs= is =$true=, only directories are returned.

#+begin_src elvish
  fn files [arg &regex='' &dirs-only=$false]{
    put {$arg}*[match-hidden][nomatch-ok] | each [x]{
      if (and (or (not $dirs-only) (-is-dir $x)) (or (eq $regex '') (re:match $regex $x))) {
        put $x
      }
    }
  }
#+end_src

=comp:extract-opts= takes input from the pipeline and parses it using a regular expression with three groups. Group #1 should be the short option letter, #2 is the long option name, and #3 is the description. At last one of short/long is mandatory, everything else is optional.

#+begin_src elvish
  fn extract-opts [@cmd &regex='(?:-(\w),\s*)?--([\w-]+).*?\s\s(\w.*)$']{
    all | each [l]{
    re:find $regex $l } | each [m]{
      short long desc = $m[groups][1 2 3][text]
      opt = [&]
      if (not-eq $short '') { opt[short] = $short }
      if (not-eq $long  '') { opt[long]  = $long  }
      if (not-eq $desc  '') { opt[desc]  = $desc  }
      put $opt
    }
  }
#+end_src


** Completion functions

=comp:expand= is the main entry point which expands a "completion definition item" into its completion values. If it's a function, it gets executed with the current element of the command line as a single argument. If it's a list, it's exploded to its elements. If it's a map which contains the =-seq= key, it gets processed with =comp:sequence=, and if it's a map without the =-seq= key, it gets passed to =comp:subcommands= (see below for the details of these functions). You can call =comp:sequence= or =comp:subcommands= directly if you want, but otherwise =comp:expand= will handle the different structures automatically.

#+begin_src elvish
  # Forward declarations to be overriden later
  fn sequence { }
  fn subcommands { }

  fn expand [def @cmd]{
    arg = $cmd[-1]
    what = (kind-of $def)
    if (eq $what 'fn') {
      fnargs = [ (count $def[arg-names]) (not-eq $def[rest-arg] '') ]
      if (eq $fnargs [ 0 $false ]) {
        $def
      } elif (eq $fnargs [ 1 $false ]) {
        $def $arg
      } elif (eq $fnargs [ 0 $true ]) {
        $def $@cmd
      }
    } elif (eq $what 'list') {
      explode $def
    } elif (eq $what 'map') {
      if (has-key $def '-seq') {
        sequence $def $@cmd
      } else {
        subcommands $def $@cmd
      }
    }
  }
#+end_src

=comp:sequence= receives a definition map and the current contents of the command line, and uses =edit:complete-getopt= to actually generate the completions. For this, we need to make sure the options and argument handler data structures are in accordance to what =complete-getopt= expects.

#+begin_src elvish
  sequence~ = [def @cmd]{
#+end_src

If =$def= contains a key =-opts=, it has to be a list with one element for each command-line option. Element which are maps are assumed to be in the final format (with keys =short=, =long= and =desc=) and used as-is. Elements which are strings are considered as long option names and converted to the appropriate data structure.

#+begin_src elvish
  opts = []
  if (has-key $def -opts) {
    expand $def[-opts] $@cmd | each [opt]{
      if (eq (kind-of $opt) map) {
        opts = [ $@opts $opt ]
      } else {
        opts = [$@opts [&long= $opt]]
      }
    }
  }
#+end_src

We also preprocess the handlers. =edit:complete-getopt= expects each handler to receive only one argument (the current word in the command line), but =comp= allows handlers to receive no arguments, one argument (the current element of the command line) or multiple arguments (the whole command line), so we need to normalize them. Happily, Elvish's functional nature makes this easy by checking the arity of each handler and, if necessary, wrapping them in one-argument functions, but passing them the information they expect.

#+begin_src elvish
  handlers = []
  explode $def[-seq] | each [f]{
    new-f = $f
    if (eq (kind-of $f) 'fn') {
      fnargs = [ (count $f[arg-names]) (not-eq $f[rest-arg] '') ]
      if (eq $fnargs [ 0 $false ]) {
        new-f = [_]{ $f }
      } elif (eq $fnargs [ 1 $false ]) {
        new-f = $f
      } elif (eq $fnargs [ 0 $true ]) {
        new-f = [_]{ $f $@cmd }
      }
    } elif (eq (kind-of $f) 'list') {
      new-f = [_]{ explode $f }
    }
    handlers = [ $@handlers $new-f ]
  }
#+end_src

Finally, we call =edit:complete-getopt= with the corresponding data structures. It expects the current line /without/ the initial command, so we remove that as well.

#+begin_src elvish
    edit:complete-getopt $cmd[1:] $opts $handlers
  }
#+end_src

=comp:subcommands= receives a definition map and the current contents of the command line.

#+begin_src elvish
  subcommands~ = [def @cmd]{
    n = (count $cmd)
#+end_src

If completion for the top-level subcommand is expected (=eq $n 2=), the top-level indices plus the global options (if provided in the =-opts= element).

#+begin_src elvish
  if (eq $n 2) {
    tmp-def = [ &-seq= [ [_]{ keys (dissoc $def -opts) } ] ]
    if (has-key $def -opts) {
      tmp-def[-opts] = $def[-opts]
    }
    expand $tmp-def $@cmd
#+end_src

Otherwise, depending on the subcommand already provided, the corresponding element of the corresponding definition list is expanded. If the element is a string, it is considered and alias, so we call =subcommands= with the target command.

#+begin_src elvish
    } else {
      subcommand = $cmd[1]
      if (has-key $def $subcommand) {
        if (eq (kind-of $def[$subcommand]) 'string') {
          subcommands $def $cmd[0] $def[$subcommand] (explode $cmd[2:])
        } else {
          expand $def[$subcommand] (explode $cmd[1:])
        }
      }
    }
  }
#+end_src

** Completion wrapper functions

The wrapper functions receive only the =$def= argument, and return a /function/ which takes the current command and call the corresponding completion function with the correct arguments. We have a wrapper-generator function which takes the function to call and returns the appropriate wrapper function. Very meta.

#+begin_src elvish
  fn -wrapper-gen [func]{
    put [def]{ put [@cmd]{ $func $def $@cmd } }
  }
#+end_src

#+begin_src elvish
  expand-wrapper~ = (-wrapper-gen $expand~)
  sequence-wrapper~ = (-wrapper-gen $sequence~)
  subcommands-wrapper~ = (-wrapper-gen $subcommands~)
#+end_src
