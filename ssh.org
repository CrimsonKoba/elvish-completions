#+TITLE:  Elvish completions for ssh
#+AUTHOR: Diego Zamboni
#+EMAIL:  diego@zzamboni.org

This module implements completions for =ssh=, =scp= and =sftp=.

This file is written in [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][literate programming style]], to make it easy to explain. See [[file:ssh.elv][ssh.elv]] for the generated file.

* Table of Contents                                            :TOC:noexport:
- [[#usage][Usage]]
- [[#implementation][Implementation]]
  - [[#libraries-and-global-variables][Libraries and global variables]]
  - [[#initialization][Initialization]]

* Usage

Install the =elvish-completions= package using [[https://elvish.io/ref/epm.html][epm]]:

#+begin_src elvish
  use epm
  epm:install github.com/zzamboni/elvish-completions
#+end_src

In your =rc.elv=, load this module:

#+begin_src elvish
  use github.com/zzamboni/elvish-completions/ssh
#+end_src

Hosts for the completions will be read from the files listed in the =$config-files= variable. Here is its default value:

#+begin_src elvish :noweb-ref config-files
  config-files = [ ~/.ssh/config /etc/ssh/ssh_config /etc/ssh_config ]
#+end_src

All hosts listed in =Host= sections of the config files will be provided for completion. Patterns including any metacharacters (=*=, =?= and =!=) will not be shown.

#+begin_example
[~]─> ssh <tab>
 COMPLETING argument
 host1                host2                  host3
#+end_example

Completions are also provided for config options. If you type =-o<space>=  and press ~Tab~, a list of valid configuration options will be provided. The valid configuration options are automatically extracted from the =ssh_config= man page, if it's available.

#+begin_example
[~]─> ssh -o <tab>
 COMPLETING argument _
 AddKeysToAgent=                   ControlPath=                HostKeyAlias=                  NoHostAuthenticationForLocalhost=  ServerAliveCountMax=
 AddressFamily=                    ControlPersist=             HostName=                      NumberOfPasswordPrompts=           ServerAliveInterval=
 BatchMode=                        DynamicForward=             HostbasedAuthentication=       PKCS11Provider=                    StreamLocalBindMask=
 ...
#+end_example

* Implementation
:PROPERTIES:
:header-args:elvish: :tangle (concat (file-name-sans-extension (buffer-file-name)) ".elv")
:header-args: :mkdirp yes :comments no
:END:

** Libraries and global variables

We first load a number of libraries, including =comp=, the Elvish completion framework.

#+begin_src elvish
  use ./comp
  use re
#+end_src

List of config files from which to extract hostnames.

#+begin_src elvish :noweb yes
  <<config-files>>
#+end_src

** Initialization

The =-ssh-hosts= function extracts all hostnames from the files listed in =$config-files=. Nonexistent files in the list are ignored, and only hostnames which do not include glob characters (=*=, =?=, =!=) are returned.

#+begin_src elvish
  fn -ssh-hosts {
    hosts = [&]
    explode $config-files | each [file]{
      _ = ?(cat $file 2>/dev/null) | eawk [_ @f]{
        if (re:match '^(?i)host$' $f[0]) {
          explode $f[1:] | each [p]{
            if (not (re:match '[*?!]' $p)) {
              hosts[$p] = $true
    }}}}}
    keys $hosts
  }
#+end_src

We store in =-ssh-options= all the possible configuration options, by parsing them directly from the =ssh_config= man page (if available). These are initialized on first use to reduce load time, and cached so that any delay is only incurred once.

#+begin_src elvish
  -ssh-options = []
  fn -gen-ssh-options {
    if (eq $-ssh-options []) {
      -ssh-options = [(
          _ = ?(cat (man -w ssh_config 2>/dev/null)) |
          eawk [l @f]{ if (re:match '^\.It Cm' $l) { put $f[2] } } |
          comp:decorate &suffix='='
      )]
    }
    explode $-ssh-options
  }
#+end_src

=-gen-completions= dynamically generates the completion definition for ssh-related commands. We use this because the completions for =ssh= and =scp=, for example, are the same except for the suffix that needs to be added to the hostnames in the completion. The completion definition in all cases provides either the list of valid options (if the previous argument is =-o=, or otherwise =-o= plus the list of hosts (with the appropriate suffix).

#+begin_src elvish
  ssh-opts = [
    [ &short= o
      &arg-required= $true
      &arg-completer= $-gen-ssh-options~
    ]
  ]

  fn -ssh-host-completions [arg &suffix='']{
    user-given = (joins '' [(re:find '^(.*@)' $arg)[groups][1][text]])
    -ssh-hosts | each [host]{ put $user-given$host } | comp:decorate &suffix=$suffix
  }
#+end_src

We use =-gen-completions= to produce the actual completion definitions for =ssh= and =scp=.

We initialize the completions by using =comp:expand-wrapper= to produce the functions with the corresponding definition and assign them to the corresponding elements of =$edit:completion:arg-completer=.

#+begin_src elvish
  edit:completion:arg-completer[ssh]  = (comp:sequence &opts=$ssh-opts [$-ssh-host-completions~])
  edit:completion:arg-completer[sftp] = (comp:sequence &opts=$ssh-opts [$-ssh-host-completions~])
  edit:completion:arg-completer[scp]  = (comp:sequence &opts=$ssh-opts [
      [arg]{
        -ssh-host-completions &suffix=":" $arg
        edit:complete-filename $arg
      }
      ...
  ])
#+end_src
