#+TITLE:  Elvish completions for ssh
#+AUTHOR: Diego Zamboni
#+EMAIL:  diego@zzamboni.org

This module implements completions for =ssh=.

This file is written in [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][literate programming style]], to make it easy to explain. See [[file:$name.elv][$name.elv]] for the generated file.

* Table of Contents                                            :TOC:noexport:
- [[#usage][Usage]]
- [[#implementation][Implementation]]
  - [[#libraries-and-global-variables][Libraries and global variables]]
  - [[#initialization][Initialization]]

* Usage

Install the =elvish-completions= package using [[https://elvish.io/ref/epm.html][epm]]:

#+begin_src elvish
  use epm
  epm:install github.com/zzamboni/elvish-completions
#+end_src

In your =rc.elv=, load this module:

#+begin_src elvish
  use github.com/zzamboni/elvish-completions/ssh
#+end_src

* Implementation
:PROPERTIES:
:header-args:elvish: :tangle (concat (file-name-sans-extension (buffer-file-name)) ".elv")
:header-args: :mkdirp yes :comments no
:END:

** Libraries and global variables

We first load a number of libraries, including =comp=, the Elvish completion framework.

#+begin_src elvish
  use ./comp
  use re
#+end_src

This is where the big completion-definition map will get build up progressively below.

#+begin_src elvish
  completions = []
#+end_src

List of config files from which to extract hostnames.

#+begin_src elvish
  config-files = [ ~/.ssh/config /etc/ssh/ssh_config /etc/ssh_config ]
#+end_src

** Initialization

The =-ssh-hosts= function extracts all hostnames from the files listed in =$config-files=. Nonexistent files in the list are ignored, and only hostnames which do not include glob characters (=*=, =?=, =!=) are returned.

#+begin_src elvish
  fn -ssh-hosts {
    hosts = [&]
    explode $config-files | each [file]{
      _ = ?(cat $file 2>/dev/null) | eawk [_ @f]{
        if (re:match '^(?i)host$' $f[0]) {
          explode $f[1:] | each [p]{
            if (not (re:match '[*?!]' $p)) {
              hosts[$p] = $true
    }}}}}
    keys $hosts
  }
#+end_src

We store the call to =-ssh-hosts= in =$completions=.

#+begin_src elvish
  completions = [ { -ssh-hosts } ]
#+end_src

Finally, we define =ssh-completer= to simply call =comp:sequence= with out completion definition.

#+begin_src elvish
  fn ssh-completer [@cmd]{
    comp:sequence $completions $@cmd
  }
#+end_src

We initialize the completions by assigning the function to the corresponding element of =$edit:completion:arg-completer=.

#+begin_src elvish
  edit:completion:arg-completer[ssh] = $ssh-completer~
#+end_src
