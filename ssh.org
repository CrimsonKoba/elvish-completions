#+TITLE:  Elvish completions for ssh
#+AUTHOR: Diego Zamboni
#+EMAIL:  diego@zzamboni.org

This module implements completions for =ssh=, =scp= and =sftp=.

This file is written in [[http://www.howardism.org/Technical/Emacs/literate-programming-tutorial.html][literate programming style]], to make it easy to explain. See [[file:ssh.elv][ssh.elv]] for the generated file.

* Table of Contents                                            :TOC:noexport:
- [[#usage][Usage]]
- [[#implementation][Implementation]]
  - [[#libraries-and-global-variables][Libraries and global variables]]
  - [[#initialization][Initialization]]

* Usage

Install the =elvish-completions= package using [[https://elvish.io/ref/epm.html][epm]]:

#+begin_src elvish
  use epm
  epm:install github.com/zzamboni/elvish-completions
#+end_src

In your =rc.elv=, load this module:

#+begin_src elvish
  use github.com/zzamboni/elvish-completions/ssh
#+end_src

Hosts for the completions will be read from the files listed in the =$config-files= variable. Here is its default value:

#+begin_src elvish :noweb-ref config-files
  config-files = [ ~/.ssh/config /etc/ssh/ssh_config /etc/ssh_config ]
#+end_src

All hosts listed in =Host= sections of the config files will be provided for completion. Patterns including any metacharacters (=*=, =?= and =!=) will not be shown.

#+begin_example
[~]─> ssh <tab>
 COMPLETING argument
 host1                host2                  host3
#+end_example

Completions are also provided for config options. If you type =-o<space>=  and press ~Tab~, a list of valid configuration options will be provided. The valid configuration options are automatically extracted from the =ssh_config= man page, if it's available.

#+begin_example
[~]─> ssh -o <tab>
 COMPLETING argument _
 AddKeysToAgent=                   ControlPath=                HostKeyAlias=                  NoHostAuthenticationForLocalhost=  ServerAliveCountMax=
 AddressFamily=                    ControlPersist=             HostName=                      NumberOfPasswordPrompts=           ServerAliveInterval=
 BatchMode=                        DynamicForward=             HostbasedAuthentication=       PKCS11Provider=                    StreamLocalBindMask=
 ...
#+end_example

* Implementation
:PROPERTIES:
:header-args:elvish: :tangle (concat (file-name-sans-extension (buffer-file-name)) ".elv")
:header-args: :mkdirp yes :comments no
:END:

** Libraries and global variables

We first load a number of libraries, including =comp=, the Elvish completion framework.

#+begin_src elvish
  use ./comp
  use re
#+end_src

This is where the big completion-definition map will get build up progressively below.

#+begin_src elvish
  completions = []
#+end_src

List of config files from which to extract hostnames.

#+begin_src elvish :noweb yes
  <<config-files>>
#+end_src

** Initialization

The =-ssh-hosts= function extracts all hostnames from the files listed in =$config-files=. Nonexistent files in the list are ignored, and only hostnames which do not include glob characters (=*=, =?=, =!=) are returned.

#+begin_src elvish
  fn -ssh-hosts {
    hosts = [&]
    explode $config-files | each [file]{
      _ = ?(cat $file 2>/dev/null) | eawk [_ @f]{
        if (re:match '^(?i)host$' $f[0]) {
          explode $f[1:] | each [p]{
            if (not (re:match '[*?!]' $p)) {
              hosts[$p] = $true
    }}}}}
    keys $hosts
  }
#+end_src

The =-ssh-options= function lists all the possible configuration options, by parsing them from the =ssh_config= man page (if available).

#+begin_src elvish
  fn -ssh-options {
    _ = ?(cat (man -w ssh_config 2>/dev/null)) | eawk [l @f]{ if (re:match '^\.It Cm' $l) { put $f[2] } }
  }
#+end_src

We store the call to =-ssh-hosts= in =$ssh-completions=. We also complete =-o= to help with the configuration options.

#+begin_src elvish
  completions-ssh = [ { -ssh-hosts; put '-o' } ]
#+end_src

For =scp= we use the same call to =-ssh-hosts=, but we add a colon automatically to each one.

#+begin_src elvish
  completions-scp = [ { -ssh-hosts | comp:decorate &suffix=':'; put '-o' } ]
#+end_src


Finally, we define =ssh-completer= to complete with =-ssh-options= if the last argument is =-o=, or with the defined completions array using =comp:sequence= otherwise. It receives as argument the definition to use, so that we can pass it =$completions-ssh= or =$completions-scp=.

#+begin_src elvish
  fn ssh-completer [def @cmd]{
    if (eq $cmd[-2] "-o") {
      -ssh-options | comp:decorate &suffix='='
    } else {
      comp:sequence $def $@cmd
    }
  }
#+end_src

We initialize the completions by assigning the call to =ssh-completer= with the correct definition to the corresponding elements of =$edit:completion:arg-completer=.

#+begin_src elvish
  edit:completion:arg-completer[ssh]  = [@cmd]{ ssh-completer $completions-ssh $@cmd }
  edit:completion:arg-completer[sftp] = [@cmd]{ ssh-completer $completions-ssh $@cmd }
  edit:completion:arg-completer[scp]  = [@cmd]{ ssh-completer $completions-scp $@cmd }
#+end_src
