#+title: Elvish completions for git
#+author: Diego Zamboni
#+email: diego@zzamboni.org

This module implements completions for =git= or for tools which allow git commands to be passed, like =vcsh=.

Some original inspiration from https://github.com/occivink/config/blob/master/.elvish/rc.elv.

* Table of Contents                                            :TOC:noexport:
- [[#usage][Usage]]
- [[#implementation][Implementation]]
  - [[#libraries-and-global-variables][Libraries and global variables]]
  - [[#configuration-variables][Configuration variables]]
  - [[#utility-functions][Utility functions]]
  - [[#initialization-of-completion-definitions][Initialization of completion definitions]]

* Usage

Install the =elvish-completions= package using [[https://elvish.io/ref/epm.html][epm]]:

#+begin_src elvish
  use epm
  epm:install github.com/zzamboni/elvish-completions
#+end_src

In your =rc.elv=, load this module:

#+begin_src elvish
  use github.com/zzamboni/elvish-completions/git
#+end_src

Now you can type =git<space>=, press ~Tab~ and see the corresponding completions. All =git= commands are automatically completed with their options (automatically extracted from their help messages). Some commands get more specific completions, including =add=, =push=, =checkout=, =diff= and a few others. Git aliases are automatically detected as well. Aliases which point to a single =git= command are automatically completed like the original command.

* Implementation
:PROPERTIES:
:header-args:elvish: :tangle (concat (file-name-sans-extension (buffer-file-name)) ".elv")
:header-args: :mkdirp yes :comments no
:END:

** Libraries and global variables

We first load a number of libraries, including =comp=, the Elvish completion framework.

#+begin_src elvish
  use ./comp
  use re
  use github.com/muesli/elvish-libs/git
  use github.com/zzamboni/elvish-modules/util
#+end_src

This is where the big completion-definition map will get build up progressively below.

#+begin_src elvish
  completions = [&]
#+end_src

We store the output of =git:status= in a global variable to make it easier to access by the different completion functions.

#+begin_src elvish
  status = [&]
#+end_src

** Configuration variables

The =$option-style= variable contains the style to use for command options in the completion menu. Set to =''= (an empty string) to show in the normal style.

#+begin_src elvish
  option-style = gray
#+end_src

** Utility functions

The =-run-git-cmd= function executes a git-like command, with the given arguments.  =$gitcmd= can be a single command, a multi-word command or a function and still be executed correctly. We cannot simply run =$gitcmd $@rest= because Elvish always interprets the first token (the head) to be the command.  One example of a multi-word =$gitcmd= is ="vcsh <repo>"=, after which any git subcommand is valid.

#+begin_src elvish
  fn -run-git-cmd [gitcmd @rest]{
    gitcmds = [$gitcmd]
    if (eq (kind-of $gitcmd) string) {
      gitcmds = [(splits " " $gitcmd)]
    }
    cmd = $gitcmds[0]
    if (eq (kind-of $cmd) string) {
      cmd = (external $cmd)
    }
    $cmd (explode $gitcmds[1:]) $@rest
  }
#+end_src

The =-git-opts= function receives an optional git command, runs =git [command] -h= and parses the output to extract the command line options.

#+begin_src elvish
  fn -git-opts [@cmd]{
    _ = ?(git add -h) | each [l]{
      re:find '(?:-(\w),\s*)?--([\w-]+).*?\s\s(\w.*)$' $l
    } | each [m]{
      short long desc = $m[groups][1 2 3][text]
      opt = [&]
      if (not-eq $short '') { opt[short] = $short }
      if (not-eq $long  '') { opt[long]  = $long  }
      if (not-eq $desc  '') { opt[desc]  = $desc  }
      put $opt
    }
  }
#+end_src

We define the functions that return different possible values for completions. These functions assume that =$status= contains already the output from =git:status=, which gets executed by =git-completer= below.

#+begin_src elvish
  fn MODIFIED      [@_]{ explode $status[local-modified] }
  fn UNTRACKED     [@_]{ explode $status[untracked] }
  fn MOD-UNTRACKED [@_]{ MODIFIED; UNTRACKED }
  fn TRACKED       [@_]{ _ = ?(git ls-files 2>/dev/null) }
  fn BRANCHES      [@_]{ _ = ?(git branch --list --all --format '%(refname:short)' 2>/dev/null) }
  fn REMOTES       [@_]{ _ = ?(git remote 2>/dev/null) }
#+end_src

** Initialization of completion definitions

In this section we initialize the =$completions= map with the necessary data structure for =comp:expand= to provide the completions. We extract as much information as possible automatically from =git= itself.

First , we fetch the list of valid git commands from the output of =git help -a=. Initially all of them are configured to produce  completions for their options, as extracted by the =-git-opts= function, and no other argument completions. Some of them get assigned more specific completions below.

#+begin_src elvish
  git help -a | eawk [line @f]{ if (re:match '^  [a-z]' $line) { put $@f } } | each [c]{
    completions[$c] = [
      &-opts= { -git-opts $c }
      &-seq= [ { comp:empty } ]
    ]
  }
#+end_src

Next, we parse the defined aliases from the output of =git config --list=. We store the aliases in =completions= as well, but we check if an alias points to another valid command. In this case, we store the name of the target command as its value, which =comp:expand= interprets as "use the completions from the target command".

#+begin_src elvish
  git config --list | each [l]{ re:find '^alias\.([^=]+)=(.*)$' $l } | each [m]{
    alias target = $m[groups][1 2][text]
    if (has-key $completions $target) {
      completions[$alias] = $target
    } else {
      completions[$alias] = { comp:empty }
    }
  }
#+end_src

Now, we add to =$completions= the git commands for which we have specific completions. Each element's value is a list of functions which return the possible completions at that point in the command. Note that the first element always includes a call to the =-git-opts= function to provide the completions for the options at that point as well. The last element is repeated for all further completions.

#+begin_src elvish
  completions[add] = [
    &-opts= { -git-opts add }
    &-seq= [ $MOD-UNTRACKED~ ... ]
  ]
  completions[stage] =    add
  completions[checkout] = [
    &-opts= { -git-opts checkout }
    &-seq= [ [_]{ MODIFIED; BRANCHES } ... ]
  ]
  completions[mv] = [
    &-opts= { -git-opts mv }
    &-seq= [ $TRACKED~ ... ]
  ]
  completions[rm] = [
    &-opts= { -git-opts rm }
    &-seq= [ $TRACKED~ ... ]
  ]
  completions[diff] = [
    &-opts= { -git-opts diff }
    &-seq= [ [_]{ MODIFIED; BRANCHES  } ... ]
  ]
  completions[push] = [
    &-opts= { -git-opts push }
    &-seq= [ $REMOTES~ $BRANCHES~ ]
  ]
  completions[merge] = [
    &-opts= { -git-opts merge }
    &-seq= [ $BRANCHES~ ... ]
  ]
#+end_src

We also store in =$completions= the list of global git options, extracted from the output of =git --help=.

#+begin_src elvish
  completions[-opts] = { -git-opts }
#+end_src

Finally, we define =git-completer= to simply fetch the current git status information, and call =comp:expand= with out completion definitions.

#+begin_src elvish
  fn git-completer [gitcmd @rest]{
    status = (git:status)
    comp:expand $completions $gitcmd $@rest
  }
#+end_src

We initialize the completions by assigning the function to the corresponding element of =$edit:completion:arg-completer=. Note that =git:completer= can also be used to complete for other commands which accept git-like commands, such as =vcsh=.

#+begin_src elvish
  edit:completion:arg-completer[git] = $git-completer~
#+end_src
